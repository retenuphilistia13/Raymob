plugins {
    id 'com.android.application'
}

def updateFile(filePath, toReplace, replacement) {
    def file = file(filePath)
    def modifiedContent = file.text.replaceAll(toReplace, replacement)
    file.write(modifiedContent)
}

android {
    namespace project.properties['app.application_id']
    compileSdk 33

    defaultConfig {
        minSdk 24
        targetSdk 33

        applicationId project.properties['app.application_id']
        versionCode Integer.parseInt(project.properties['app.version_code'])
        versionName project.properties['app.version_name']

        // Defining the application name label (to the resources)
        resValue "string", "app_name", project.properties['app.name']

        // Generates a build configuration based on the requested features in gradle.properties
        buildConfigField("boolean", "FEATURE_VIBRATION", project.properties['features.vibration'] ?: "false")
        buildConfigField("boolean", "FEATURE_ACCELEROMETER", project.properties['features.accelerometer'] ?: "false")
        buildConfigField("boolean", "FEATURE_SOFT_KEYBOARD", project.properties['features.soft_keyboard'] ?: "false")

        // Substitution variables for the manifest
        manifestPlaceholders = [
            'APP_LIB_NAME': project.properties['app.native_library_name'],
            'APP_ORIENTATION': project.properties['app.orientation'],
            'FEATURE_INTERNET': project.properties['features.internet'],
            'FEATURE_VIBRATION': project.properties['features.vibration'],
            'FEATURE_ACCELEROMETER': project.properties['features.accelerometer']
        ]

        // Give to CMake the name of the library
        externalNativeBuild {
            cmake {
                arguments "-DAPP_LIB_NAME=${project.properties['app.native_library_name']}"
            }
        }

        applicationVariants.all { variant ->

            // Change output names to the correct ones
            variant.outputs.all {
                outputFileName = outputFileName.replace("com.raylib.raymob", project.properties['app.application_id'])
                outputFileName = outputFileName.replace("raymob", project.properties['app.native_library_name'])
            }

            // Deletion of unused feature class files from the output directory
            variant.mergeResourcesProvider.configure {
                doLast {
                    if (!project.properties['features.vibration']) {
                        delete(fileTree(dir: variant.mergeResources.outputDir, includes: ['**/Vibration*.class']))
                    }
                    if (!project.properties['features.accelerometer']) {
                        delete(fileTree(dir: variant.mergeResources.outputDir, includes: ['**/Accelerometer*.class']))
                    }
                    if (!project.properties['features.soft_keyboard']) {
                        delete(fileTree(dir: variant.mergeResources.outputDir, includes: ['**/SoftKeyboard*.class']))
                    }
                }
            }

        }

    }

    // Execute the preBuild task before the compilation
    preBuild.doLast {

        // Modify the package name and library name in NativeLoader.java
        updateFile("src/main/java/com/raylib/raymob/NativeLoader.java", "package com.raylib.raymob;", "package " + project.properties['app.application_id'] + ";")
        updateFile("src/main/java/com/raylib/raymob/NativeLoader.java", "System.loadLibrary\\(\"raymob\"\\);", "System.loadLibrary\\(\"" + project.properties['app.native_library_name'] + "\"\\);")

        // Modify the package name in raymob/Features.java
        updateFile("src/main/java/com/raylib/raymob/Features.java", "package com.raylib.raymob;", "package " + project.properties['app.application_id'] + ";")

        // Modify the package name in proguard-rules.pro
        updateFile("proguard-rules.pro", "com.raylib.raymob", project.properties['app.application_id'])

        // Modify the library name in raymob/helper.c
        updateFile("src/main/cpp/deps/raymob/helper.c", "com/raylib/raymob", project.properties['app.application_id'].replace(".", "/"))

    }

    // Execute the postBuild task after the compilation
    gradle.buildFinished {

        // Restore the package name and library name in NativeLoader.java
        updateFile("src/main/java/com/raylib/raymob/NativeLoader.java", "package " + project.properties['app.application_id'] + ";", "package com.raylib.raymob;")
        updateFile("src/main/java/com/raylib/raymob/NativeLoader.java", "System.loadLibrary\\(\"" + project.properties['app.native_library_name'] + "\"\\);", "System.loadLibrary\\(\"raymob\"\\);")

        // Restore the package name in raymob/Features.java
        updateFile("src/main/java/com/raylib/raymob/Features.java", "package " + project.properties['app.application_id'] + ";", "package com.raylib.raymob;")

        // Restore the package name in proguard-rules.pro
        updateFile("proguard-rules.pro", project.properties['app.application_id'], "com.raylib.raymob")

        // Restore the library name in raymob/helper.c
        updateFile("src/main/cpp/deps/raymob/helper.c", project.properties['app.application_id'].replace(".", "/"), "com/raylib/raymob")

    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            debuggable false
            jniDebuggable false
            pseudoLocalesEnabled false
            zipAlignEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
    buildFeatures {
        buildConfig true
        viewBinding true
    }
}

/*

// Add your project's dependencies here.
// This section is used to include external libraries or modules that your project relies on.
// These dependencies will be automatically downloaded and integrated into the build process.
// To add a new dependency, use the 'implementation' or 'api' keyword followed by the library's coordinate or name.

dependencies {

}

*/
